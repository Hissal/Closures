<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net9.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <Company>Lassi Harjaluoma</Company>
        <PackageId>Closures</PackageId>
        <RootNamespace>Lh.Closures</RootNamespace>
        <Version>1.0.0-alpha3</Version>
        <Title>Closures</Title>
        <Authors>Lassi Harjaluoma</Authors>
        <Description>Closure structs that capture a context and a delegate that is invoked with the given context.</Description>
        <Copyright>Copyright (c) Lassi Harjaluoma 2025.</Copyright>
        <PackageProjectUrl>https://github.com/Hissal/Closures</PackageProjectUrl>
        <RepositoryUrl>https://github.com/Hissal/Closures</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageTags>Closure Capture Closures Delegate Event Action Func Function</PackageTags>

        <PackageLicenseExpression>MIT</PackageLicenseExpression>

        <PackageIcon>Logo_128x128.png</PackageIcon>

        <AssemblyName>Lh.Closures</AssemblyName>

        <PackageReleaseNotes>Added Anonymous Closures
Closure.Anonymous(context, delegate);
Anonymous closurees can be used with any type of delegate but must be manually invoked using:
anonymousClosure.Delegate.Invoke()

Any closure can be converted to an anonymous closure using:
closure.ToAnonymous() or closure.AsAnonymous&lt;TContext, TDelegate, TClosure&gt;()

Anonymous closures can be converted back to a known one with: anonymousClosure.AsKnown&lt;TContext, TDelegate, TClosure&gt;() or by using ClosureConverter.TryConvert(anonymousClosure)</PackageReleaseNotes>
    </PropertyGroup>

    <ItemGroup>
      <None Update="Logo_128x128.png">
        <Pack>True</Pack>
        <PackagePath>Logo_128x128.png</PackagePath>
      </None>
    </ItemGroup>
    
</Project>
